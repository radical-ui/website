{"version":3,"file":"chunk.ebee9d43.js","sources":["../../../../node_modules/svelte/store/index.mjs"],"sourcesContent":["import { safe_not_equal, noop, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (!stop) {\n                return; // not ready\n            }\n            subscribers.forEach((s) => s[1]());\n            subscribers.forEach((s) => s[0](value));\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n * @param {Stores} stores input stores\n * @param {function(Stores=, function(*)=):*}fn function callback that aggregates the values\n * @param {*=}initial_value when used asynchronously\n */\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    const invalidators = [];\n    const store = readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            run_all(invalidators);\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n    return {\n        subscribe(run, invalidate = noop) {\n            invalidators.push(invalidate);\n            const unsubscribe = store.subscribe(run, invalidate);\n            return () => {\n                const index = invalidators.indexOf(invalidate);\n                if (index !== -1) {\n                    invalidators.splice(index, 1);\n                }\n                unsubscribe();\n            };\n        }\n    };\n}\n\nexport { derived, readable, writable };\n"],"names":["writable","value","stop","start","noop","subscribers","set","new_value","safe_not_equal","forEach","s","update","fn","subscribe","run","subscriber","push","length","index","indexOf","splice"],"mappings":"+CAkBA,SAASA,EAASC,OACVC,EADiBC,yDAAQC,EAEvBC,EAAc,YACXC,EAAIC,MACLC,EAAeP,EAAOM,GAAY,IAClCN,EAAQM,GACHL,SAGLG,EAAYI,QAAQ,SAACC,UAAMA,EAAE,OAC7BL,EAAYI,QAAQ,SAACC,UAAMA,EAAE,GAAGT,YAwBjC,CAAEK,IAAAA,EAAKK,gBArBEC,GACZN,EAAIM,EAAGX,KAoBWY,mBAlBHC,OACTC,EAAa,CAACD,yDADaV,UAEjCC,EAAYW,KAAKD,GACU,IAAvBV,EAAYY,SACZf,EAAOC,EAAMG,IAAQF,GAEzBU,EAAIb,GACG,eACGiB,EAAQb,EAAYc,QAAQJ,IACnB,IAAXG,GACAb,EAAYe,OAAOF,EAAO,GAEH,IAAvBb,EAAYY,SACZf,IACAA,EAAO"}